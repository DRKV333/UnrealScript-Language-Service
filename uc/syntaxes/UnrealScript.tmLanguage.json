{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "UnrealScript",
    "scopeName": "source.uc",
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#class-declaration"
        },
        {
            "include": "#const-declaration"
        },
        {
            "include": "#var-declaration"
        },
        {
            "include": "#method-declaration"
        },
        {
            "include": "#defaultproperties"
        },
        {
            "name": "keyword.other",
            "match": "\\b(?i)(struct|enum|state|none|local|for|if|return|true|false|break|continue|goto|case|switch|do|while|until|static|default)\\b"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                {
                    "name": "comment.block.uc",
                    "begin": "/\\*",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.uc"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.uc"
                        }
                    }
                },
                {
                    "name": "comment.line.double-slash.uc",
                    "begin": "//",
                    "end": "\n"
                }
            ]
        },
        "literal": {
            "patterns": [
                {
                    "name": "string.quoted.single.uc",
                    "begin": "'",
                    "end": "'"
                },
                {
                    "name": "string.quoted.double.uc",
                    "begin": "\"",
                    "end": "\""
                },
                {
                    "name": "constant.language.boolean.uc",
                    "match": "true|false"
                },
                {
                    "name": "constant.numeric.hex.uc",
                    "match": "0(x|X)[0-9a-fA-F]?"
                },
                {
                    "name": "constant.numeric.decimal.uc",
                    "match": "([0-9_]+)?(\\.[0-9]+(F|f)?)?"
                }
            ]
        },
        "class-declaration": {
            "name": "meta.class",
            "begin": "(?i)(?=\\b(class|interface)\\b)",
            "end": "(?<=;)",
            "patterns": [
                {
                    "begin": "(?i)(class|interface)\\s+(@?[_[:alpha:]][_[:alnum:]]*)\\s*((?i)(extends|expands)\\s+(@?[_[:alpha:]][_[:alnum:]]*))?",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.class.uc"
                        },
                        "2": {
                            "name": "entity.name.type.class.uc"
                        },
                        "4": {
                            "name": "keyword.other.extends.uc"
                        },
                        "5": {
                            "name": "entity.other.inherited-class.uc"
                        }
                    },
                    "patterns": [
                        {
                            "begin": "\\b(?i)(abstract|export|exportstructs|noexport|noexportheader|nativereplication|transient|nontransient|nousercreate|notplaceable|placeable)\\b",
                            "name": "keyword.other.modifier.uc",
                            "end": "\\b"
                        },
                        {
                            "begin": "\\b(?i)(config|native|intrinsic)\\b\\s*(\\(\\s*(@?[_[:alpha:]][_[:alnum:]]*)\\s*)?",
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.other.modifier.uc"
                                },
                                "3": {
                                    "name": "string.quoted.double.uc"
                                }
                            },
                            "end": "\\b"
                        },
                        {
                            "begin": "\\b(?i)(dllbind|inherits|dependson|hidecategories|showcategories|implements|classgroup|autocollapsecategories|dontautocollapsecategories|autoexpandcategories|dontsortcategories)\\s*\\(\\s*(@?[_[:alpha:]][_[:alnum:]]*)\\s*",
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.other.modifier.uc"
                                },
                                "2": {
                                    "name": "entity.name.type.uc"
                                }
                            },
                            "end": "\\)"
                        }
                    ],
                    "end": ";"
                }
            ]
        },
        "const-declaration": {
            "name": "meta.constant",
            "begin": "(?i)(?=\\bconst\\b)",
            "end": "(?<=;)",
            "patterns": [
                {
                    "begin": "(?i)(const)\\s+(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\=)\\s*",
                    "captures": {
                        "1": {
                            "name": "keyword.other.constant.uc"
                        },
                        "2": {
                            "name": "entity.name.constant.uc"
                        },
                        "3": {
                            "name": "keyword.operator.assignment.uc"
                        }
                    },
                    "end": ";",
                    "patterns": [
                        {
                            "include": "#literal"
                        }
                    ]
                }
            ]
        },
        "var-declaration": {
            "name": "meta.variable",
            "begin": "(?i)(?=\\bvar\\b)",
            "end": "(?<=;)",
            "patterns": [
                {
                    "begin": "(?i)(var)\\b(\\s*\\((@?[_[:alpha:]][_[:alnum:]]*)\\))?",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.other.variable.uc"
                        },
                        "3": {
                            "name": "string.quoted.double.uc"
                        }
                    },
                    "end": "\\s+"
                },
                {
                    "begin": "((?i)(public|protected|private|const|noexport|editconst|editconstarray|automated|config|globalconfig|localized|native|transient)\\b)",
                    "beginCaptures": {
                        "2": {
                            "name": "storage.modifier.uc"
                        }
                    },
                    "end": "\\b"
                },
                {
                    "begin": "(@?[_[:alpha:]][_[:alnum:]]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.type.uc"
                        }
                    },
                    "patterns": [
                        {
                            "begin": "\\<(\\b(@?[_[:alpha:]][_[:alnum:]]*)(.(@?[_[:alpha:]][_[:alnum:]]*))?)",
                            "beginCaptures": {
                                "2": {
                                    "name": "entity.name.type.uc"
                                },
                                "3": {
                                    "name": "punctuation.accessor.uc"
                                },
                                "4": {
                                    "name": "entity.name.type.uc"
                                }
                            },
                            "end": "\\>"
                        },
                        {
                            "begin": "(@?[_[:alpha:]][_[:alnum:]]*)(\\b,\\b)?",
                            "beginCaptures": {
                                "1": {
                                    "name": "entity.name.variable.uc"
                                }
                            },
                            "end": ""
                        }
                    ],
                    "end": ";"
                }

            ]
        },
        "method-declaration": {
            "name": "meta.method",
            "begin": "(?i)(?=\\b(static|final|simulated|public|protected|private))",
            "end": "(?<=\\{)",
            "patterns": [
                {
                    "begin": "(?i)(function|event|delegate|operator|preoperator|postoperator)",
                    "beginCaptures": {
                        "0": {
                            "name": "storage.modifier.uc"
                        },
                        "1": {
                            "name": "keyword.other.method.uc"
                        }
                    },
                    "end": "\\b"
                }
            ]
        },
        "defaultproperties": {
            "name": "meta.block",
            "begin": "(?i)(?=\\b(defaultproperties))",
            "patterns": [
                {
                    "name": "keyword.other.method.uc",
                    "match": "((?i)defaultproperties)"
                },
                {
                    "begin": "\\{",
                    "patterns": [
                        {
                            "begin": "\\b(@?[_[:alpha:]][_[:alnum:]]*)",
                            "beginCaptures": {
                                "0": {
                                    "name": "variable.name.uc"
                                }
                            },
                            "end": "\\b"
                        },
                        {
                            "name": "keyword.operator.assignment.uc",
                            "match": "\\="
                        }
                    ],
                    "end": "\\}"
                }
            ],
            "end": "(?<=\\})"
        },
        "punctuation-comma": {
			"name": "punctuation.separator.comma.uc",
			"match": ","
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.uc",
			"match": ";"
		},
		"punctuation-accessor": {
			"name": "punctuation.accessor.uc",
			"match": "\\."
        }
    }
}