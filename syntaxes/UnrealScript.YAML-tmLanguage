# target_format: json, ext: tmLanguage
---
name: UnrealScript Syntax Definition (UC)
fileTypes: [.uc, .uci]
scopeName: source.uc
uuid: 809240e6-4c3b-477f-8bcf-2eeddb00e050

foldingStartMarker: \{\s*$
foldingStopMarker: ^\s*\}

patterns:
  - include: '#comment'
  - include: '#declarations'

repository:
  comment:
    patterns:
      - name: comment.block.uc
        begin: /\*
        beginCaptures:
          '0':
            name: punctuation.definition.comment.uc
        end: \*/
        endCaptures:
          '0':
            name: punctuation.definition.comment.uc
      - name: comment.line.double-slash.uc
        begin: //
        end: \n

  directive:
    name: meta.preprocessor.macro.uc
    begin: ^\s*(\#)\s*\b(((?i)include|error)|((?i)call|exec|linenumber))\b
    beginCaptures:
      '1':
        name: punctuation.separator.hash.uc
      '3':
        name: keyword.control.directive.other.uc
      '4':
        name: keyword.preprocessor.directive.other.uc
    patterns:
      - include: '#comment'
      - include: '#expression' #technically incorrect, but this is nice to have.
    end: (?<=$)

  string:
    patterns:
      - name: string.quoted.single.uc
        begin: "'"
        end: "'"

      - name: string.quoted.double.uc
        match: \"(\\.|[^\"])*\"

      - include: '#string-character-escape'

  string-character-escape:
    name: constant.character.escape.uc
    match: \\.

  literal:
    patterns:
      - include: '#string'
      - include: '#numeric-literal'
      - include: '#boolean-literal'
      - include: '#object-literal'

  boolean-literal:
    patterns:
      - name: constant.language.boolean.false.uc
        match: \b(?i)false\b
      - name: constant.language.boolean.true.uc
        match: \b(?i)true\b

  numeric-literal:
    patterns:
      - name: constant.numeric.hex.uc
        match: 0(x|X)[0-9a-fA-F]+

      - name: constant.numeric.decimal.uc
        match: '[0-9]+(f|F)?'

  object-literal:
    begin: ([_[:alpha:]][_[:alnum:]]*)\s*(\')
    beginCaptures:
      '1':
        name: entity.name.type.class.uc
      '2':
        name: string.quoted.single.uc
    patterns:
      - match: ([_[:alpha:]][_[:alnum:]]*)
        name: variable.other.object.uc
    end: \'
    endCaptures:
      '0':
        name: string.quoted.single.uc

  # Anything that is a static value such as a literal but including some "special tokens"
  constant:
    patterns:
      - include: '#comment'
      - include: '#literal'

      - name: constant.language.null.uc
        match: \b((?i)none)\b

      - begin: \b((?i)sizeof)\b
        beginCaptures:
          '0':
            name: keyword.constant.uc
        patterns:
          - begin: \(
            beginCaptures:
              '0':
                name: punctuation.parenthesis.open.uc
            patterns:
              - include: '#comment'
              - match: ([_[:alpha:]][_[:alnum:]]*)
                name: entity.name.type.class.uc
            end: \)
            endCaptures:
              '0':
                name: punctuation.parenthesis.close.uc
        end: (?=;)

      # Including the parenthesis as part of the "begin" expression here.
      # - So that we can properly detect the ending of this special token when used as an expression.
      - begin: \b((?i)arraycount|nameof)\s*(\()?\b
        beginCaptures:
          '1':
            name: keyword.constant.uc
          '2':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#comment'
          - match: ([_[:alpha:]][_[:alnum:]]*)
            name: variable.other.field.uc
        end: (?=(\)))
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      - begin: \b((?i)vect|rng|rot)\b
        beginCaptures:
          '0':
            name: keyword.constant.uc
        patterns:
          - begin: \(
            beginCaptures:
              '0':
                name: punctuation.parenthesis.open.uc
            patterns:
              - include: '#comment'
              - include: '#numeric-literal'
            end: \)
            endCaptures:
              '0':
                name: punctuation.parenthesis.close.uc
        end: (?=;|\b)

  declarations:
    patterns:
      - include: '#class-declaration'
      - include: '#cppblock'
      - include: '#type-declarations'
      - include: '#replication'
      - include: '#method-modifier'
      - include: '#method-declaration'
      - include: '#state-modifier'
      - include: '#state-declaration'
      - include: '#defaultproperties'
      - include: '#directive'

  type-declarations:
    patterns:
      - include: '#const-declaration'
      - include: '#enum-declaration'
      - include: '#struct-declaration'
      - include: '#var-declaration'

  type-modifier:
    patterns:
      - match: \b((?i)public|protected|protectedwrite|private|privatewrite|localized|native|intrinsic|const|editconst|config|globalconfig|transient|travel|input|export|noexport|cache|automated|edithide|editinline|editinlinenotify|editinlineuse|editconstarray|edfindable|init|editfixedsize|editoronly|editortextbox|noclear|noimport|serializetext|nontransactional|instanced|databinding|duplicatetransient|repretry|repnotify|interp|deprecated|notforconsole|archetype|crosslevelactive|crosslevelpassive)\b
        name: storage.modifier.uc
      # export modifier
      - begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: source.c++
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc

  type-declaration:
    patterns:
      - include: '#comment'
      - include: '#type-modifier'

      - begin: \b(?:((?i)float|int|byte|bool|button|name|string|pointer|array|map|delegate)|([_[:alpha:]][_[:alnum:]]*))\b
        beginCaptures:
          '1':
            name: storage.type.primitive.uc
          '2':
            name: entity.name.type.uc
        patterns:
          - include: '#comment'

          # Delimmiter e.g. Array<string>
          - begin: \<
            beginCaptures:
              '0':
                name: punctuation.definition.typeparameters.begin.uc
            patterns:
              - include: '#inlined-declaration'
            end: \>
            endCaptures:
              '0':
                name: punctuation.definition.typeparameters.end.uc

          # String size
          - begin: \[
            patterns:
              - include: '#numeric-literal'
              - match: ([_[:alpha:]][_[:alnum:]]*)
                captures:
                  '1':
                    name: entity.name.variable.field.uc
            end: \]

          # export type
          - begin: \{
            beginCaptures:
              '0':
                name: punctuation.curlybrace.open.uc
            patterns:
              - include: source.c++""
            end: \}
            endCaptures:
              '0':
                name: punctuation.curlybrace.close.uc

          - begin: ([_[:alpha:]][_[:alnum:]]*)
            beginCaptures:
              '1':
                name: entity.name.variable.field.uc
            patterns:
              # array dimension
              - begin: \[
                patterns:
                  - include: '#numeric-literal'
                  - match: ([_[:alpha:]][_[:alnum:]]*)
                    captures:
                      '1':
                        name: entity.name.variable.field.uc
                end: \]

              # metadata
              - begin: \<
                beginCaptures:
                  '0':
                    name: punctuation.definition.metadata.begin
                patterns:
                  - match: ([_[:alpha:]][_[:alnum:]]*)(\s*(=)\s*([^\||\>]+)?)?
                    captures:
                      '1':
                        name: entity.name.metadata.key.uc
                      '3':
                        name: keyword.operator.assignment.uc
                      '4':
                        name: string.uc
                end: \>
                endCaptures:
                  '0':
                    name: punctuation.definition.metadata.end

              # export type
              - begin: \{
                beginCaptures:
                  '0':
                    name: punctuation.curlybrace.open.uc
                patterns:
                  - include: source.c++
                end: \}
                endCaptures:
                  '0':
                    name: punctuation.curlybrace.close.uc
            end: (?=\;|\,)
        end: \;|\)

  inlined-declaration:
    patterns:
      - include: '#comment'
      - include: '#type-modifier'

        # predefined alias types
      - match: \b((?i)float|int|byte|bool|button|name|string|pointer|array|map|delegate)\b
        name: keyword.type.primitive.uc

        # Delimmiter e.g. array<string>, or Class<Object>
      - begin: \<
        beginCaptures:
          '0':
            name: punctuation.definition.typeparameters.begin.uc
        patterns:
          - include: '#inlined-declaration'
        end: \>
        endCaptures:
          '0':
            name: punctuation.definition.typeparameters.end.uc

      - include: '#enum-declaration'
      - include: '#struct-declaration'

        # Qualified type id e.g. Actor.ERemoteRole
      - match: ([_[:alpha:]][_[:alnum:]]*)
        name: entity.name.type.uc

  class-declaration:
    name: meta.class
    begin: (?=\b((?i)class|interface)\b)
    end: (?<=\;)
    patterns:
      - include: '#comment'
      - begin: ((?i)class|interface)\s+(?<id>[_[:alpha:]][_[:alnum:]]*)\s*(((?i)extends|expands)\s+(?<qualifiedId>[_[:alpha:]][_[:alnum:]]*))?\s*(((?i)within)\s+(?<qualifiedId>[_[:alpha:]][_[:alnum:]]*))?
        beginCaptures:
          '0':
            name: keyword.other.class.uc
          '2':
            name: entity.name.type.class.uc
          '4':
            name: storage.modifier.uc
          '5':
            name: entity.other.inherited-class.uc
          '7':
            name: storage.modifier.uc
          '8':
            name: entity.other.inherited-class.uc
        patterns:
          - begin: \b((?i)abstract|export|exportstructs|noexport|noexportheader|nativereplication|nativeonly|deprecated|transient|nontransient|nousercreate|notplaceable|placeable|safereplace|hidedropdown|editinlinenew|noteditinlinenew|cacheexempt|perobjectconfig|perobjectlocalized|forcescriptorder|instanced)\b
            name: storage.modifier.uc
            end: \b

          - begin: \b((?i)config|native|intrinsic)(\s*\()?
            beginCaptures:
              '1':
                name: storage.modifier.uc
            patterns:
              - match: '[_[:alpha:]][_[:alnum:]]*'
                name: string.quoted.single.uc
            end: \b|\)

          - begin: \b((?i)hidecategories|showcategories|autocollapsecategories|dontautocollapsecategories|autoexpandcategories|dontsortcategories|collapsecategories|dontcollapsecategories)\s*\(
            beginCaptures:
              '1':
                name: storage.modifier.uc
            patterns:
              - match: '[_[:alpha:]][_[:alnum:]]*'
                name: string.quoted.single.uc
            end: \)

          - begin: \b((?i)dllbind|inherits|dependson|implements|classgroup)\s*\(
            beginCaptures:
              '1':
                name: storage.modifier.uc
              '2':
                name: entity.name.type.uc
            patterns:
              - match: '[_[:alpha:]][_[:alnum:]]*'
                name: entity.name.type.uc
            end: \)
        end: \;

  const-declaration:
    name: meta.constant
    begin: \b((?i)const)\b
    beginCaptures:
      '1':
        name: storage.type.constant.uc
    patterns:
      - include: '#comment'
      - begin: \s+([_[:alpha:]][_[:alnum:]]*)\s*(\=)\s*
        beginCaptures:
          '1':
            name: variable.other.constant.uc
          '2':
            name: keyword.operator.assignment.uc
        patterns:
          - include: '#constant'
        end: \;
    end: (?<=\;)

  enum-declaration:
    name: meta.enum.declaration.uc
    begin: \b((?i)enum)\s*([_[:alpha:]][_[:alnum:]]*)
    beginCaptures:
      '1':
        name: storage.type.enum.uc
      '2':
        name: entity.name.type.enum.uc
    patterns:
      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#comment'
          - match: '[_[:alpha:]][_[:alnum:]]*'
            name: variable.other.enummember.uc
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\}|\;)

  struct-declaration:
    name: meta.struct.declaration.uc
    begin: \b((?i)struct)\b\s*(\{(\s*[_[:alpha:]][_[:alnum:]]*\s*)\})?\s*(\b((?i)native|intrinsic|transient|export|strictconfig|atomic|atomicwhencooked|immutable|immutablewhencooked|init|long)\b\s*)*([_[:alpha:]][_[:alnum:]]*)(\s*((?i)extends)\s*([_[:alpha:]][_[:alnum:]]*))?
    beginCaptures:
      '1':
        name: storage.type.struct.uc
      '3':
        name: entity.name.type.struct.uc
      '5':
        name: storage.modifier.uc
      '6':
        name: entity.name.type.struct.uc
      '8':
        name: storage.modifier.uc
      '9':
        name: entity.other.inherited-class.uc
    patterns:
      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#comment'
          - include: '#type-declarations'
          - include: '#structdefaultproperties'
          - include: '#structcppblock'
          - include: '#directive'
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\}|\;)

  var-declaration:
    begin: \b((?i)var)\b(\s*\(\s*([_[:alpha:]][_[:alnum:]]*)\s*\))?
    beginCaptures:
      '1':
        name: storage.type.variable.uc
      '3':
        name: string.quoted.single.uc
    patterns:
      - include: '#comment'
      - include: '#enum-declaration'
      - include: '#struct-declaration'
      - include: '#type-declaration'
    end: (?<=\;)

  method-modifier:
    patterns:
      - match: (\b((?i)static|final|simulated|public|protected|private|exec|iterator|latent|singular|const|noexport|noexportheader|virtual|reliable|unreliable|server|client|dllimport|demorecording|native|intrinsic|k2call|k2override|k2pure)\b)(\s*\(\s*([0-9]*)\s*\))?
        captures:
          '2':
            name: storage.modifier.uc
          '4':
            name: constant.numeric.uc

      # export modifier
      - begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: source.c++""
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc

  method-declaration:
    name: meta.method.declaration
    begin: (\b(?i)(function)|(event)|(delegate)|(preoperator)|(postoperator)\b)|(?:(\b(?i)operator\b)((\s*\(\s*([0-9]*)\s*\)))?)
    end: (?<=\}|\;)
    beginCaptures:
      '1':
        name: keyword.other.method.uc
      '2':
        name: keyword.other.function.uc
      '3':
        name: keyword.other.event.uc
      '4':
        name: keyword.other.delegate.uc
      '5':
        name: keyword.other.operator.pre.uc
      '6':
        name: keyword.other.operator.post.uc
      '7':
        name: keyword.other.operator.uc
      '10':
        name: constant.numeric.uc
    patterns:
      - include: '#comment'

      # Method without a specified return type
      - begin: (([_[:alpha:]][_[:alnum:]]*)|(\W+))\s*(\()
        beginCaptures:
          '2':
            name: entity.name.function.uc
          '3':
            name: entity.name.operator.uc
          '4':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#parameter-declaration'
        end: (?<=\))
        endCaptures:
          '1':
            name: punctuation.parenthesis.close.uc

      # Return type?
      - match: \b(?:(?i)coerce)\b
        name: storage.modifier.uc
      - begin: \b(?:((?i)float|int|byte|bool|button|name|string|pointer|array|map|delegate)|([_[:alpha:]][_[:alnum:]]*))\b
        beginCaptures:
          '1':
            name: storage.type.primitive.uc
          '2':
            name: entity.name.type.uc
        patterns:
          - include: '#comment'

          # Delimmiter e.g. Array<string>
          - begin: \<
            beginCaptures:
              '0':
                name: punctuation.definition.typeparameters.begin.uc
            patterns:
              - include: '#inlined-declaration'
            end: \>
            endCaptures:
              '0':
                name: punctuation.definition.typeparameters.end.uc

          # String size
          - begin: \[
            patterns:
              - include: '#comment'
              - include: '#numeric-literal'

              - match: ([_[:alpha:]][_[:alnum:]]*)
                captures:
                  '1':
                    name: entity.name.variable.field.uc
            end: \]

          # export type
          - begin: \{
            beginCaptures:
              '0':
                name: punctuation.curlybrace.open.uc
            patterns:
              - include: source.c++
            end: \}
            endCaptures:
              '0':
                name: punctuation.curlybrace.close.uc

          - begin: (([_[:alpha:]][_[:alnum:]]*)|(\W+))\s*(\()
            beginCaptures:
              '2':
                name: entity.name.function.uc
              '3':
                name: entity.name.operator.uc
              '4':
                name: punctuation.parenthesis.open.uc
            patterns:
              - include: '#parameter-declaration'
            end: (?<=\))
            endCaptures:
              '1':
                name: punctuation.parenthesis.close.uc
        end: (?<=\)|;)

      - match: \b(?:(?i)const)\b
        name: storage.modifier.uc

        #method body
      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#local-declaration'
          - include: '#statement'
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc

  param-modifier:
    name: storage.modifier.uc
    match: \b(?:(?i)optional|out|coerce|const|init|skip)\b

  parameter-declaration:
    patterns:
      - include: '#comment'
      - include: '#param-modifier'
      - begin: \b(?:((?i)float|int|byte|bool|button|name|string|pointer|array|map|delegate)|([_[:alpha:]][_[:alnum:]]*))\b
        beginCaptures:
          '1':
            name: storage.type.primitive.uc
          '2':
            name: entity.name.type.uc
        patterns:
          - include: '#comment'

          # Delimmiter e.g. Array<string>
          - begin: \<
            beginCaptures:
              '0':
                name: punctuation.definition.typeparameters.begin.uc
            patterns:
              - include: '#inlined-declaration'
            end: \>
            endCaptures:
              '0':
                name: punctuation.definition.typeparameters.end.uc

          # String size
          - begin: \[
            patterns:
              - include: '#comment'
              - include: '#numeric-literal'

              - match: ([_[:alpha:]][_[:alnum:]]*)
                captures:
                  '1':
                    name: entity.name.variable.field.uc
            end: \]

          # export type
          - begin: \{
            beginCaptures:
              '0':
                name: punctuation.curlybrace.open.uc
            patterns:
              - include: source.c++
            end: \}
            endCaptures:
              '0':
                name: punctuation.curlybrace.close.uc

          - match: ([_[:alpha:]][_[:alnum:]]*)
            captures:
              '1':
                name: entity.name.variable.parameter.uc
        end: (?=\,)|(?<=\))

  local-declaration:
    name: meta.variable
    begin: \b((?i)local)\b
    beginCaptures:
      '1':
        name: keyword.other.variable.uc
    patterns:
      - include: '#comment'
      - include: '#type-declaration'
    end: (?<=\;)

  state-modifier:
    match: \b((?i)auto|simulated)\b
    captures:
      '1':
        name: storage.modifier.uc

  state-declaration:
    name: meta.state.declaration.uc
    begin: \b((?i)state)(\s*\(\s*\))?\s*([_[:alpha:]][_[:alnum:]]*)(\s*((?i)extends)\s*([_[:alpha:]][_[:alnum:]]*))?
    beginCaptures:
      '1':
        name: storage.type.state.uc
      '3':
        name: entity.name.type.state.uc
      '5':
        name: storage.modifier.uc
      '6':
        name: entity.other.inherited-class.uc
    patterns:
      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#comment'
          - include: '#const-declaration'
          - include: '#local-declaration'
          # TODO: Must be invalid within a labeled-block
          - begin: \b((?i)ignores)\b
            beginCaptures:
              '1':
                name: keyword.other.ignores.uc
            patterns:
              - match: ([_[:alpha:]][_[:alnum:]]*)
                name: entity.name.function.uc
            end: (?<=\;)
          - include: '#method-modifier'
          - include: '#method-declaration'
          - include: '#statement'
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\}|\;)

  cppblock:
    begin: \b((?i)cpptext)\b
    beginCaptures:
      '1':
        name: keyword.other.uc
    patterns:
      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: source.c++
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\})

  structcppblock:
    begin: \b((?i)structcpptext|cppstruct)\b
    beginCaptures:
      '1':
        name: keyword.other.uc
    patterns:
      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: source.c++
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\})

  replication:
    begin: \b((?i)replication)\b
    beginCaptures:
      '1':
        name: keyword.other.replication.uc
    patterns:
      - name: meta.block
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#comment'
          - begin: \b((?i)unreliable|reliable)?\s*((?i)if)?
            beginCaptures:
              '1':
                name: keyword.other.modifier.uc
              '2':
                name: keyword.control.conditional.uc
            patterns:
              - include: '#comment'
              - begin: \(
                beginCaptures:
                  '0':
                    name: meta.brace.round.uc
                patterns:
                  - include: '#expression'
                end: \)
                endCaptures:
                  '0':
                    name: meta.brace.round.uc
              - name: variable.other.field.uc
                match: '([_[:alpha:]][_[:alnum:]]*)'
            end: \;
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\})

  statement:
    patterns:
      - include: '#comment'

      - include: '#const-declaration'

      - match: (([_[:alpha:]][_[:alnum:]]*)\s*(\:))
        captures:
          '1':
            name: entity.name.label.uc
          '2':
            name: punctuation.separator.label.uc

      - name: keyword.control.conditional.uc
        match: \b(?:(?i)if|switch|case|(default\s*\:)|while|foreach|for|do|until|else|assert)\b

      - name: keyword.control.flow.uc
        match: \b(?:(?i)return|continue|break|stop|goto)\b

      - include: '#expression'
      - include: '#directive'

  expression:
    patterns:
      - include: '#comment'

      - name: variable.language.this.uc
        match: \b(?:(?i)global|self|default|static|const)\b

      - match: ((?i)super)(?:\s*\(\s*([_[:alpha:]][_[:alnum:]]*\s*)\))?
        captures:
          '1':
            name: variable.language.super.uc
          '2':
            name: entity.other.inherited-class.uc

      # meta-class casting
      - begin: ((?i)class)\s*(\<)
        beginCaptures:
          '0':
            name: cast.expr.uc
          '1':
            name: entity.name.type.class.uc
          '2':
            name: punctuation.arrow.open.uc
        patterns:
          - match: ([_[:alpha:]][_[:alnum:]]*)
            name: entity.name.type.class.uc
        end: \>
        endCaptures:
          '0':
            name: punctuation.arrow.close.uc

      # primitive castings
      - begin: ((?i)byte|float|int|string|name|bool|button)\s*(\()
        beginCaptures:
          '0':
            name: cast.expr.uc
          '1':
            name: keyword.type.uc
          '2':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#expression'
        end: \)
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      # Predefined struct casting. UC only supports casting for two struct types.
      - begin: ((?i)vector|rotator)\s*(\()
        beginCaptures:
          '0':
            name: cast.expr.uc
          '1':
            name: entity.name.type.struct.uc
          '2':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#expression'
        end: \)
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      # new operator
      - match: \b((?i)new)\b
        name: new.expr.uc
        captures:
          '1':
            name: keyword.operator.new.uc

      - include: '#constant'

      - begin: ([_[:alpha:]][_[:alnum:]]*)\s*(\()
        beginCaptures:
          '0':
            name: meta.function-call.uc
          '1':
            name: entity.name.function.uc
          '2':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#expression'
        end: \)
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      - name: variable.other.field.uc
        match: ([_[:alpha:]][_[:alnum:]]*)

      - name: "keyword.operator.assignment.compound.uc"
        match: (\*=|(?<!\()/=|%=|\+=|\-=|\$=|\@=)

      # UnrealScript doesn't support any compound bitwise assigment operators
      # - name: "keyword.operator.assignment.compound.bitwise.uc"
      # match:

      - name: "keyword.operator.bitwise.shift.uc"
        match: (<<|>>>|>>)

      - name: "keyword.operator.comparison.uc"
        match: (==|!=|~=)

      - name: "keyword.operator.relational.uc"
        match: (<=|>=|<|>)

      - name: "keyword.operator.logical.uc"
        match: (\!|&&|\|\||\^\^)

      - name: "keyword.operator.bitwise.uc"
        match: (\&|~|\^|\|)

      - name: "keyword.operator.assignment.uc"
        match: (\=)

      - name: "keyword.operator.decrement.uc"
        match: (--)

      - name: "keyword.operator.increment.uc"
        match: (\+\+)

      - name: "keyword.operator.arithmetic.uc"
        match: (%|\*|/|-|\+|\#|\$|\@)

      - name: punctuation.definition.expression
        begin: \(
        beginCaptures:
          '0':
            name: punctuation.parenthesis.open.uc
        patterns:
          - include: '#expression'
        end: \)
        endCaptures:
          '0':
            name: punctuation.parenthesis.close.uc

      - name: meta.block.uc
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#statement'
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc

  propertiesBlock:
    patterns:
      - begin: \b(begin ((?i)object))\b
        beginCaptures:
          '0':
            name: keyword.other.uc
        patterns:
          - include: '#propertiesBlock'
        end: \b(end ((?i)object))\b
        endCaptures:
          '0':
            name: keyword.other.uc
      - include: '#expression'

  defaultproperties:
    begin: \b((?i)defaultproperties)\b
    beginCaptures:
      '1':
        name: keyword.other.defaultproperties.uc
    patterns:
      - name: meta.block
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#propertiesBlock'
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\})

  structdefaultproperties:
    begin: \b((?i)structdefaultproperties)\b
    beginCaptures:
      '1':
        name: keyword.other.structdefaultproperties.uc
    patterns:
      - name: meta.block
        begin: \{
        beginCaptures:
          '0':
            name: punctuation.curlybrace.open.uc
        patterns:
          - include: '#propertiesBlock'
        end: \}
        endCaptures:
          '0':
            name: punctuation.curlybrace.close.uc
    end: (?<=\})
